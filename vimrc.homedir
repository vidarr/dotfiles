"==============================================================================
" Options
"==============================================================================

" make 'find' usable
set path+=**
set wildmenu

set exrc
set secure

set title titlestring=

set nocompatible              " be iMproved, required
set encoding=utf-8

filetype plugin on
filetype indent on

set expandtab
set tabstop=4
set shiftwidth=4
set nu

set smartindent
syntax on

" Make backspace behave 'the normal way'
set backspace=indent,eol,start

set hlsearch
set incsearch

set complete-=t     " Disable complete searching tags - I dont use them

set scrolloff=999

" Plugin-friendly supplicant to `set autochdir`
autocmd BufEnter * silent! lcd %:p:h

" Have netrw change the current dir to its own working dir
let g:netrw_keepdir=0



set autoread

" colorscheme desert
syntax enable
" Colors
set background=dark
colorscheme skirnir
" Find proper gui font by invoking
" set guifont=*
set guifont=Monospace:h14

" Handle X11 selection
set guioptions+=a

" Highlight column stuff
let g:Colorcolumn = "80,".join(range(120,999),",")
let &colorcolumn=g:Colorcolumn
highlight ColorColumn cterm=NONE ctermbg=234 guibg=#2c2d27
highlight OverLength cterm=NONE ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" prevent copying line numbers
set mouse=a

" Highlight current line
hi CursorLine   cterm=NONE ctermbg=gray ctermfg=black guibg=gray guifg=black
set cursorline

" Highlight current column
hi CursorColumn cterm=NONE ctermbg=gray ctermfg=black guibg=gray guifg=black
set cursorcolumn

set hidden

exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list

"==============================================================================
" netrw options
"
" File patterns to hide. Can be toggled by 'a'
let g:netrw_list_hide='.*\.o$,^\..*'

"==============================================================================
"bufferlist options
let g:BufferListWidth = 80
let g:BufferListMaxWidth = 80

"markdown support
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100

"==============================================================================
" Environmental adaptions

" When printig from vim (":hardcopy > file.pdf"), interpret form feed (^L) as
" PAGE BREAKS
"set printoptions=formfeed:y


" Fix terminal type if inside gnu screen(1)
if match($TERM, "screen")!=-1
    set term=screen-256color
endif

"=====[ Change cursor during insertion "]=======================================

let &t_SI="\033[5 q" " start insert mode, switch to blinking cursor
let &t_EI="\033[1 q" " end insert mode, back to square cursor

"=====[ Folding ================================================================
" Folding

" Don't start new buffers folded
set foldlevelstart=99

" Highlight folds
highlight Folded  ctermfg=cyan ctermbg=black

"=====[ Search folding ]========================================================

" Don't start new buffers folded
set foldlevelstart=99

" Highlight folds
highlight Folded  ctermfg=cyan ctermbg=black

" Toggle special folds on and off...
nmap <silent> <expr>  zz  FS_ToggleFoldAroundSearch({'context':1})
nmap <silent> <expr>  zc  FS_ToggleFoldAroundSearch({'hud':1})

"==============================================================================
" Statusline
"
" Always show status line
set laststatus=2

hi User1 ctermfg=197 ctermbg=237 cterm=NONE guifg=#ae81ff guibg=NONE gui=NONE

set statusline=
set statusline+=%#function#\ %l
set statusline+=\ %*
set statusline+=%#LineNr#
set statusline+=\ ‹‹
set statusline+=\ %f\ %*
set statusline+=%#LineNr#
set statusline+=\ ››
set statusline+=\ %m
set statusline+=%1*\ %F
set statusline+=%=
set statusline+=%#LineNr#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 

"==============================================================================
" Manpage support
runtime ftplugin/man.vim

"==============================================================================
" Key mappings
"==============================================================================

" FuzzyFinder
"
cnorea b FufBuffer<cr>
cnorea e FufFile<cr>

" Forgot what this ought to mean?
cnorea   fb ?\%1c{<CR>
cnorea   fe /\%1c}<CR>

let mapleader = '\'

nmap <silent> <Leader>ol :FSRight<cr>
nmap <silent> <Leader>oL :FSSplitRight<cr>
nmap <silent> <Leader>oj :FSBelow<cr>
nmap <silent> <Leader>oJ :FSSplitBelow<cr>

" Toggle FoldSearch
nmap <silent> <expr>  zz  FS_ToggleFoldAroundSearch({'context':1})

" Markdown preview
nnoremap <silent> <C-p> :MarkdownPreview default<CR>

" Shortcut
imap <C-w><C-w>  <esc><C-w><C-w>

"==============================================================================
" Shortcuts
" Insert separator  ( -[-*] ) from end of line to column 80
" Overwritten by certain ftplugins
nnoremap <silent> <leader>s <esc>A=<esc>80A=<esc>d80<bar><esc>

" Some filetypes also define <leader>-h to create a heading with indentation

" Create 'heading' like separators but respecting current indentation
nnoremap <silent> <leader>a <esc>O/*<esc>79a*<esc>d79\|jo<esc>79a*<esc>d79\|s*/<esc>k:center<CR>

"==============================================================================

noremap <silent> <C-e> <Esc>:FufFile<CR>
noremap <silent> <C-b> <Esc>:FufBuffer<CR>
noremap <silent> <C-f> <Esc>:FSHere<CR>
noremap <silent> <F11> <Esc>:ToggleBufExplorer<CR>
noremap <silent> <F12> <Esc>:Explore<CR>

inoremap <silent> <C-e> <Esc>:FufFile<CR>
inoremap <silent> <C-b> <Esc>:FufBuffer<CR>
inoremap <silent> <C-f> <Esc>:FSHere<CR>
inoremap <silent> <F11> <Esc>:ToggleBufExplorer<CR>
inoremap <silent> <F12> <Esc>:Explore<CR>

"==============================================================================
" Autocommands
"==============================================================================

" Make '=' use clang-format instead of vim's built-in indentation
autocmd FileType c,cpp,objc map <buffer> = <Plug>(operator-clang-format)

au BufRead,BufNewFile *.dox setfiletype doxygen
au BufRead,BufNewFile *.MD setfiletype markdown

au FileType * call Reset_simple_formatting()
au FileType man call Set_simple_formatting()
au FileType netrw call Set_simple_formatting()
au FileType help call Set_simple_formatting() 
" gcov file highlighting support - along with appropriate syntax file
autocmd BufNewFile,BufReadPost *.gcov set filetype=gcov

" markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" FSwitch
au! BufEnter *.cpp let b:fswitchdst = 'h' | let b:fswitchlocs = 'rel:.,../src,source,../include,include,../../include'
au! BufEnter *.c   let b:fswitchdst = 'h' | let b:fswitchlocs = 'rel:.,../src,source,../include,include,../../include'
au! BufEnter *.h   let b:fswitchdst = 'c,cpp' | let b:fswitchlocs = 'rel:.,../src,source,../include,include'

"==============================================================================
" Abbreviations
"==============================================================================

iab *author* (C) 2019 Beer Michael, <michael.josef.beer at googlemail.com>
cab notes e ~/.vim/notes

"==============================================================================
" Functions
"==============================================================================

function Set_simple_formatting()

    set nolist
    set colorcolumn=0
    set nocursorcolumn

endfunction

function Reset_simple_formatting()

    set list
    let &colorcolumn = g:Colorcolumn
    set cursorcolumn

endfunction

" Debugging
" set verbose=9

" My statusline
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

"==============================================================================
"                                Templates
"==============================================================================

" let g:Templatedir="..."

"==============================================================================
"                                Play away
"==============================================================================

" Enable hybrid mode and toggle smartly
" https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
augroup numbertoggle
autocmd!
autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" For vim config files, reload
au FileType vim nmap <silent> <leader>r :source %<CR>

noremap <silent> <F12> <ESC>: ! kate %<CR>


